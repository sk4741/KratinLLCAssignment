package com.app.services;

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.dao.DetailsRepository;
import com.app.dao.UserRepository;
import com.app.dto.DetailsRequestDTO;
import com.app.dto.ErrorResponse;
import com.app.dto.SignupRequestDTO;
import com.app.pojo.MedicalDetails;
import com.app.pojo.User;
import com.app.user_excs.UserHandlingException;


@Service
@Transactional
public class UserServiceImpl implements IUserService {

	@Autowired
	UserRepository userRepo;
	
	@Autowired
	DetailsRepository detailRepo;
	
	

	@Override
	public ResponseEntity<?> signUpUser(SignupRequestDTO user) {
		try {
		User user1=new User();
		BeanUtils.copyProperties(user, user1);
		System.out.println(user1);
		userRepo.save(user1);
		return ResponseEntity.ok().build();
		} catch (Exception e) {
	            // Handle other unexpected exceptions and return an error response
	            ErrorResponse errorResponse = new ErrorResponse("An error occurred during signup", null);
	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
	        }
	}



	@Override
	public User logInUser(String userEmail,String userPassword) {
		
		User user1 = userRepo.findByUserEmail(userEmail);

	    if (user1 == null) {
	      throw new UserHandlingException("User not found");
	    }

	    // Compare the provided password with the stored password
	    if (!user1.getUserPassword().equals(userPassword)) {
	      throw new UserHandlingException("Invalid password");
	    }
		return user1;
	}



	@Override
	public ResponseEntity<?> userMediDetails(DetailsRequestDTO data) {
		try {
			MedicalDetails data1=new MedicalDetails();
			BeanUtils.copyProperties(data, data1);
			System.out.println();
			System.out.println(data1);
			detailRepo.save(data1);
			return ResponseEntity.ok().build();
			} catch (Exception e) {
		            // Handle other unexpected exceptions and return an error response
		            ErrorResponse errorResponse = new ErrorResponse("An error occurred during adding data", null);
		            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
		        }
	}



	@Override
	public List<MedicalDetails> getMedicalDetailsByUserId(int userId) {
		
		return detailRepo.findByUserId(userId);;
	}
	
	


}
